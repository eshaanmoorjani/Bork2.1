{"version":3,"sources":["pig_logo/pig_logo.png","services/firebase.js","pages/LoginFirebase.js","pages/LoginV2.js","pages/ChatV2.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","require","initializeApp","apiKey","authDomain","projectId","databaseURL","auth","db","firestore","rt_db","database","functions","loginButtonTransition","transition","document","getElementById","button","type","addEventListener","e","chatID","joinLobbyInput","value","console","log","getChatID","username","httpsCallable","usernameApproval","then","result","message","data","signInAnonymously","onAuthStateChanged","firebaseUser","assignForSoloQueue","signIn","innerText","App","props","class","this","loginFrame","usernameError","usernameLabel","Component","Form","description","form","id","Grid","container","TextField","variant","error","label","fullWidth","autoComplete","InputLabelProps","style","fontSize","InputProps","height","inputProps","textAlign","Button","className","color","size","item","jlb","joinLobbyHover","joinLobbyNoHover","childElementCount","inputDiv","createElement","idInput","setAttribute","joinButton","joinButtonText","innerHTML","appendChild","removeChild","lastChild","HogPub","hogPubHeader","comingSoon","logo","src","Logo","alt","LobbyApp","state","userID","currentUser","uid","queueReady","participants","numParticipants","handleLogout","bind","getParticipants","changeQueueStatus","changeConnectionStatus","addAllListeners","handleQueueChange","initTime","Date","collection","doc","orderBy","onSnapshot","forEach","user_id","setState","ref","set","onDisconnect","update","queue_ready","deleteInfo","userId","chatId","catch","signOut","LobbyFrame","hogPub","misc","startQueueButton","lobbyInfoBox","leaveLobbyButton","onClick","getQueueButtonMessage","ChatFrame","numMessagesSent","numMessagesReceived","messages","lastMessageTime","Math","floor","getTime","handleSendMessage","sendMessage","makeMessageBubble","getMessages","sendMessageBox","scrollDiv","scrollIntoView","behavior","makeMessages","key","push","messageID","messageData","messageClass","timeFormatted","date","toTimeString","substr","getFormattedTime","timestamp","seconds","content","makeRealMessage","makeStatusMessage","onSubmit","placeholder","limit","event","preventDefault","inputForm","add","messageNumber","last_message_time","VideoFrame","Boolean","window","location","hostname","match","assignedChatID","chat_id","ReactDOM","render","joinTime","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd819c6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pig_logo.d0d99a55.png\";","export const firebase = require('firebase');\nconst config = {\n    apiKey: \"AIzaSyBriNz3DFDo1ra0CmHC0_ZpoCYnonSWOoo\",\n    authDomain: \"bork-cc.firebaseapp.com\",\n    projectId: \"bork-cc\",\n    databaseURL: \"https://bork-cc.firebaseio.com\"\n};\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const db = firebase.firestore();\nexport const rt_db = firebase.database()\nexport const functions = firebase.functions()\n// firebase.database();","import {auth, db, functions, firebase} from '../services/firebase';\n\nexport function loginButtonTransition() {\n    const soloQueueButton = document.getElementById('solo-queue-button');\n    transition(soloQueueButton, \"soloQueue\");\n}\n\nexport function joinLobbyTransition() {\n    const joinLobbyButton = document.getElementById(\"join-lobby-button\");\n    transition(joinLobbyButton, \"joinLobby\");\n}\n\nexport async function createLobbyTransition() {\n    \n}\n\n/* Add listener to the given button */\nfunction transition(button, type) {\n    button.addEventListener('click', e=> {\n        const chatID = getChatID(type);\n\n\n        const username_box = document.getElementById(\"username-textfield\");\n        const username = username_box.value\n\n        const usernameApproval = functions.httpsCallable('usernameApproval')\n        usernameApproval({username: username}).then(result => { \n            const message = result.data;\n            if(message === true) {\n                signIn(username, chatID)\n            }\n            else {\n                const usernameWarning = document.getElementById(\"username-warning\");\n                usernameWarning.innerText = message;\n            }\n        })\n        // if(username_box.value != \"\" && username_box.value.length < 10) {\n        //     signIn(username_box, chatID);\n        // }\n        // else {\n        //     usernameWarn(username_box);\n        // }\n    });\n}\n\n/* If solo queue button was clicked, chatID should be -1 (to be compatible with cloud function).\n   If join lobby button was clicked, chatID should be what the user entered.\n*/\nfunction getChatID(type) {\n    var chatID = \"-1\";\n    if (type == \"joinLobby\") {\n        const joinLobbyInput = document.getElementById(\"join-lobby-input\");\n        chatID = joinLobbyInput.value;\n    }\n    console.log(\"CHAT ID:\", chatID);\n    return chatID;\n}\n\nfunction signIn(username, chatID) {\n    auth.signInAnonymously();\n    auth.onAuthStateChanged(function(firebaseUser) {\n        if(firebaseUser) {\n            const assignForSoloQueue = functions.httpsCallable('assignForSoloQueue')\n            assignForSoloQueue({username: username}).then(result => { \n                console.log(result.data);\n            })\n        }\n    });\n}\n\nfunction getCheckedTags() {\n    // pre-made tags\n    var checkBoxes = document.getElementsByName(\"tag_checkbox\");\n    var checkedTags = [];\n    for (var i = 0; i < checkBoxes.length; i++) {\n        if (checkBoxes[i].checked) {\n            checkedTags.push(checkBoxes[i].id);\n        }\n    }\n    \n    return checkedTags.length > 0 ? checkedTags : [];\n}\n\nfunction getCustomTags() {\n    // convert tags to all lowercase and no whitespace, separate by commas\n    const customTags = document.getElementById(\"customTags\").value\n    if(customTags == \"\") {\n        return []\n    }\n    const customTagsArray = customTags.replace(/ /g, '').toLowerCase().split(\",\"); \n\n    return [...new Set(customTagsArray)];\n}\n\nexport default loginButtonTransition;","import './LoginV2.css';\nimport { joinLobbyTransition } from './LoginFirebase.js';\nimport React, { Component } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Logo from './../pig_logo/pig_logo.png';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div class=\"full-frame\">\n        {this.loginFrame()}\n      </div>\n    );\n  }\n\n  loginFrame() {\n    return (\n      <div class=\"login-frame\">\n        <Form usernameError={this.props.usernameError} usernameLabel={this.props.usernameLabel}></Form>\n        <HogPub></HogPub>\n      </div>\n    );\n  }\n}\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div class=\"form-frame\">\n        {this.description()}\n        {this.form()}\n      </div>\n    );\n  }\n\n  description() {\n    return (\n      <div class=\"descriptions\">\n        <h2 class=\"main-description\">\n          Enter Among Us Lobbies!\n        </h2>\n        <h3 class=\"sub-description\">\n          <p id=\"username-warning\"></p>\n        </h3>\n      </div>\n\n    );\n  }\n\n  form() {\n    return (\n      <Grid container class=\"container\">\n          <TextField class=\"username-textfield\" id=\"username-textfield\" variant=\"outlined\" error={this.props.usernameError}\n          label={this.props.usernameLabel} fullWidth={true} autoComplete=\"off\"\n          InputLabelProps={{style: {fontSize: 25}}}\n          InputProps={{style: {height: 65, fontSize: 25}}}\n          inputProps={{style: {fontSize: 40, textAlign: \"center\"}}}\n          >\n          </TextField>\n\n          <Button className=\"solo-queue-button\" id=\"solo-queue-button\" variant=\"contained\" color=\"primary\" size=\"large\" fullWidth={true}>Solo Queue</Button>\n\n          <Grid item class=\"buttons\">\n            <Button  id=\"create-lobby-button\" variant=\"outlined\" color=\"primary\" size=\"large\" fullWidth={true}>Create Lobby</Button>\n            <div id=\"join-lobby-box\">\n                <Button id=\"join-lobby-button\" variant=\"outlined\" color=\"primary\" size=\"large\" fullWidth={true}>Join Lobby</Button>\n            </div>\n          </Grid>\n      </Grid>\n    );\n  }\n\n    componentDidMount() {\n        var jlb = document.getElementById(\"join-lobby-box\");\n        jlb.addEventListener(\"mouseover\", this.joinLobbyHover);\n        jlb.addEventListener(\"mouseleave\", this.joinLobbyNoHover);\n    }\n\n    joinLobbyHover() {\n        var jlb = document.getElementById('join-lobby-box');\n\n        // if there input div is already attached, don't do anything\n        if (jlb.childElementCount > 1) {\n            return null;\n        }\n\n        // container for both the form input and the button\n        var inputDiv = document.createElement(\"div\");\n        inputDiv.className = \"join-lobby-div\"\n\n        // the form input\n        var idInput = document.createElement(\"INPUT\");\n        idInput.setAttribute(\"type\", \"text\");\n        idInput.setAttribute(\"autocomplete\", \"off\");\n        idInput.setAttribute(\"placeholder\", \"Enter Lobby ID\");\n        idInput.className = \"join-lobby-input\";\n        idInput.id = \"join-lobby-input\";\n\n        // the button\n        var joinButton = document.createElement(\"BUTTON\");\n        joinButton.className = \"join-input-button\";\n        joinButton.id = \"join-input-button\";\n\n        // the button inner text\n        var joinButtonText = document.createElement(\"p\");\n        joinButtonText.className = \"join-input-text\";\n        joinButtonText.innerHTML = \"Join!\";\n\n        joinButton.appendChild(joinButtonText);\n        inputDiv.appendChild(idInput);\n        inputDiv.appendChild(joinButton);\n        jlb.appendChild(inputDiv);\n        joinLobbyTransition();\n    }\n\n    joinLobbyNoHover() {\n        var jlb = document.getElementById('join-lobby-box');\n        jlb.removeChild(jlb.lastChild);\n    }\n\n}\n\nclass HogPub extends Component {\n  render() {\n    return (\n      <div class=\"hog-pub-frame\">\n        {this.hogPubHeader()}\n        {this.comingSoon()}\n        {this.logo()}\n      </div>\n    );\n  }\n\n  hogPubHeader() {\n    return (\n      <h1 class=\"header\">Hog Pub</h1>\n    )\n  }\n\n  comingSoon() {\n    return (\n      <h3 class=\"coming-soon\">Other games coming soon!</h3>\n    );\n  }\n\n  logo() {\n    return (\n      <img class=\"logo\" src={Logo} alt=\"logo\"/>\n    )\n  }\n}\n\n","import React, { Component } from 'react';\n\nimport './ChatV2.css';\nimport {auth, db, rt_db, functions, firebase} from '../services/firebase';\n\nexport default class LobbyApp extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chatID: this.props.chatID,\n            userID: auth.currentUser.uid,\n            username: this.props.username,\n            \n            queueReady: this.props.queueReady,\n            participants: {},\n            numParticipants: 0,\n        };\n\n        this.handleLogout = this.handleLogout.bind(this);\n\n        this.getParticipants = this.getParticipants.bind(this);\n        this.changeQueueStatus = this.changeQueueStatus.bind(this);\n        this.changeConnectionStatus = this.changeConnectionStatus.bind(this);\n        this.addAllListeners = this.addAllListeners.bind(this);\n\n        this.addAllListeners();\n    }\n\n    render() {\n        return (\n            <div class=\"full-frame\">\n                <LobbyFrame queueReady={this.state.queueReady} handleLogout={this.handleLogout} handleQueueChange={this.changeQueueStatus}/>\n                <ChatFrame chatID={this.state.chatID} userID={this.state.userID} username={this.props.username} initTime={new Date()}/>\n                <VideoFrame />\n            </div>\n        );\n    }\n\n    addAllListeners() {\n        this.getParticipants();\n        this.changeConnectionStatus();\n    }\n\n    getParticipants() {\n        const ref = db.collection(\"chats\").doc(this.state.chatID).collection(\"participants\").orderBy(\"timestamp\");\n        ref.onSnapshot(collection => {\n            var participants = {};\n            var numParticipants = 0;\n\n            collection.forEach(doc => {\n                const data = doc.data();\n                participants[data.user_id] = data.username;\n\n                numParticipants += 1;\n            });\n\n            this.setState({\n                numParticipants: numParticipants,\n                participants: participants,\n            })\n        });\n    }\n\n    changeConnectionStatus() {\n        firebase.database().ref('users/' + this.state.userID + \"/is_disconnected\").set(false); // ayoooo dont change baby girl\n        var presenceRef = rt_db.ref(\"users/\" + this.state.userID + \"/is_disconnected\");     \n        presenceRef.onDisconnect().set(true);\n    }\n\n    async changeQueueStatus() {\n        await db.collection(\"chats\").doc(this.state.chatID).update({\n            queue_ready: !this.state.queueReady\n        })\n        this.setState({\n            queueReady: !this.state.queueReady,\n        });\n    }\n\n    // this deletes from local participants, need to delete from DATABASE\n    async handleLogout() {\n        const deleteInfo = functions.httpsCallable('deleteUserInfo')\n        await deleteInfo({userId: this.state.userID, chatId: this.state.chatID, username: this.state.username}).then(result => { // CORS error that wasn't there earlier\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n    \n        auth.signOut().then(() => {\n        })\n        .catch(function (error) {\n            console.log(\"ERROR:\", error);\n        })\n    }\n\n}\n\nclass LobbyFrame extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div class=\"lobby-frame\">\n                {this.hogPub()}\n                {this.misc()}\n            </div>\n        );\n    }\n\n    hogPub() {\n        return (\n            <div class=\"hog-pub-box\">\n                <h1 class=\"hog-pub-header\">The Pub</h1>\n                <h2 class=\"lobby-title\">Among Us</h2>\n            </div>\n\n        );\n    }\n\n    misc() {\n        return (\n            <div class=\"misc-box\">\n                {this.startQueueButton()}\n                {this.lobbyInfoBox()}\n                {this.leaveLobbyButton()}\n            </div>\n        );\n    }\n\n    startQueueButton() {\n        return (\n            <button class=\"start-queue-button\" onClick={this.props.handleQueueChange}>\n                <p class=\"start-queue-text\">{this.getQueueButtonMessage()}</p>\n            </button>\n        );\n    }\n\n    leaveLobbyButton() {\n        return (\n            <button class=\"leave-lobby-button\" onClick={this.props.handleLogout}>\n                <p class=\"leave-lobby-text\">Leave Lobby</p>\n            </button>\n        );\n    }\n\n    lobbyInfoBox() {\n        return (\n            <div class=\"lobby-info-box\">\n                <h3 class=\"lobby-info-header\">Lobby Info</h3>\n                <div class=\"lobby-info-text\">\n                    <p class=\"random-stuff\">Random stuff</p>\n                </div>\n            </div>\n        );\n    }\n\n    getQueueButtonMessage() {\n        return this.props.queueReady ? \"Stop Queue\": \"Start Queue\";\n    }\n}\n\nclass ChatFrame extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            numMessagesSent: 0,\n            numMessagesReceived: 0,\n            messages: {},\n            lastMessageTime: Math.floor(this.props.initTime.getTime() / 1000),\n        }\n\n        this.handleSendMessage = this.handleSendMessage.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n        this.makeMessageBubble = this.makeMessageBubble.bind(this);\n\n        this.getMessages = this.getMessages.bind(this);\n        this.addAllListeners = this.addAllListeners.bind(this);\n\n        this.addAllListeners();\n    }\n\n    render() {\n        return (\n            <div class=\"chat-frame\">\n                {this.messages()}\n                {this.sendMessageBox()}\n            </div>\n        );\n    }\n\n    // auto scroll down\n    componentDidUpdate() {\n        const scrollDiv = document.getElementById(\"dummyScroll\");\n        if (scrollDiv != null) {\n            scrollDiv.scrollIntoView(true, { behavior: \"smooth\" });\n        }\n    }\n\n    addAllListeners() {\n        this.getMessages();\n    }\n\n    messages() {\n        return (\n            <div class=\"messages-frame\">\n                {this.makeMessages()}\n                <div id=\"dummyScroll\"></div>\n            </div>\n        );\n    }\n\n    makeMessages() {\n        var messages = [];\n        for (var key in this.state.messages) {\n            messages.push(this.makeMessageBubble(key))\n        }\n        return messages;\n    }\n\n    makeMessageBubble(messageID) {\n        function getFormattedTime(date) {\n            var timeFormatted = date.toTimeString().substr(0,5);\n            if (timeFormatted.substr(0, 2) <= 12) { // need to change 00:01 am to 12:01 am\n                timeFormatted += \" am\";\n            } else {\n                timeFormatted = timeFormatted.substr(0, 2) % 12 + timeFormatted.substr(2, 5) + \" pm\";\n            }\n            return timeFormatted\n        }\n\n        function makeRealMessage(messageData, userID) {\n            const messageClass = (messageData.userID == userID) ? \"user-message\" : \"other-message\";\n            var date = new Date(messageData.timestamp.seconds * 1000);\n            var timeFormatted = getFormattedTime(date);\n            return (\n                <div class={messageClass}>\n                    <div class=\"message-bubble\">\n                        <div class=\"message-metadata\">\n                            <div class=\"message-username\">{messageData.username}</div>\n                            <div class=\"message-timestamp\">{timeFormatted}</div>\n                        </div>\n                        <div class=\"mesage-content\">\n                            {messageData.content}\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        function makeStatusMessage(messageData, userID) {\n            return (\n                <div class=\"status-msg\">\n                    {messageData.content}\n                </div>\n            );\n        }\n\n        const messageData = this.state.messages[messageID];\n        if (messageData.type == \"user_content\") {\n            return makeRealMessage(messageData, this.props.userID);\n        } else {\n            return makeStatusMessage(messageData, this.props.userID);\n        }\n    }\n\n    sendMessageBox() {\n        return (\n            <form class=\"send-message-form\" onSubmit={this.handleSendMessage}>\n                <input class=\"send-message-input\" id=\"message-input\" placeholder=\"Type a message...\" autoComplete=\"off\"></input>\n            </form>\n        );\n    }\n\n    getMessages() {\n        const ref = db.collection(\"chats\").doc(this.props.chatID).collection(\"messages\").orderBy(\"timestamp\", \"desc\").limit(1);\n        ref.onSnapshot(collection => {\n            collection.forEach(doc => {\n                const data = doc.data();\n                    this.setState({\n                        messages: {\n                            ...this.state.messages,\n                            [this.state.numMessagesReceived + 1]: data,\n                        },\n                        numMessagesReceived: this.state.numMessagesReceived + 1,\n                        lastMessageTime: data.timestamp.seconds,\n                    });\n            });\n        });\n    }\n\n    handleSendMessage(event) {\n        event.preventDefault();\n        const inputForm = document.getElementById(\"message-input\");\n        const message = inputForm.value;\n        inputForm.value = \"\";\n        if (message != \"\") {\n            this.setState({\n                numMessagesSent: this.state.numMessagesSent + 1,\n            });\n            this.sendMessage(message);\n        }\n    }\n\n    sendMessage(message) {\n        db.collection(\"chats/\").doc(this.props.chatID).collection(\"messages/\").add({\n            content: message,\n            timestamp: new Date(),\n            userID: this.props.userID,\n            username: this.props.username,\n            messageNumber: this.state.numMessagesSent,\n            type: \"user_content\",\n        });\n        db.collection(\"chats\").doc(this.props.chatID).update({\n            last_message_time: new Date(),\n        });\n    }\n}\n\nclass VideoFrame extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div class=\"video-frame\"></div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/LoginV2';\nimport LobbyApp from './pages/ChatV2';\nimport * as serviceWorker from './serviceWorker';\nimport {db, auth} from './services/firebase';\nimport {loginButtonTransition} from './pages/LoginFirebase';\n\n// AUTH LISTENER\nauth.onAuthStateChanged(firebaseUser => {\n  console.log(\"auth changed\")\n  if(firebaseUser) { // and firebaseUser.assignedToChat\n    console.log(\"firebase user hehe\", firebaseUser)\n\n    // create a listener because client writes to database --> cloud function is called --> chatId is assigned\n    db.collection(\"users\").doc(auth.currentUser.uid).onSnapshot(function(doc) {\n      const data = doc.data();\n      console.log(data)\n      if (data != null) {\n        console.log(data)\n        const assignedChatID = data.chat_id;\n        const username = data.username;\n        ReactDOM.render(\n          <LobbyApp chatID={assignedChatID} username={username} queueReady={true} joinTime={new Date()}/>,\n          document.getElementById('root')\n        );\n      }\n    }) \n  }  \n  else {\n    ReactDOM.render(\n      <App usernameLabel=\"Username\"/>,\n      document.getElementById('root')\n    );\n    loginButtonTransition();\n  }\n});\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}